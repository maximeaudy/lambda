#######################################
#									  #
#	Documentation LMD Framework 1.0   #	
#	© 2018 Make self web development  # 
#									  #
#######################################

_________________________________________________

 Arborescence des fichiers :

/app : Dossier contenant les classes PHP
/assets : Dossier contenant les librairies
/templates : Dossier contenant les templates HTML
_________________________________________________

#################################################
_________________________________________________

Gérer les formulaires
Étapes d'exécution : Page HTML > Form.php > Class.php > Méthode de cette Class.php

1 : Page HTML
_____________

$login = new Form('lambda\Users', 'login', array_merge($_POST, array('editor' => 'username,password')), FALSE);
#0 = new Form(#1, #2, array_merge(#3), #4);

#0 = Nom du formulaire
#1 = Classe à utiliser pour définir Class.php
#2 = Méthode à utiliser de la classe
#3 = Tableau PHP contenant toutes les données à transmettre au formulaire

    array_merge(#4, #5, #6)
    #5 = Données $_POST
    #6 = Données $_FILES
    #7 = Éléments du formulaire à sécuriser différement

        array('editor' => '#8,#8')
        #8 = nom des éléments HTML (séparés par une virgule)

#4 = Type du formulaire Ajax ou Post
    Ajax = TRUE
    POST = FALSE (par défault)
______________________________

Création du form

$login->form(array('method' => 'post'));

Le tableau contient les données à mettre dans l'entête <form> HTML
'method' est obligatoire
si 'action' n'existe pas, par défault 'action' sera vide (action="")
______________________________

Exemple de création d'un input

$login->input(
    array(
    'label' => 'Nom d\'utilisateur',
    'name' => 'username',
    'required' => TRUE,
    'class' => 'class-form',
    'type' => 'text'
    )
);
_______________________________________________________________________________

###############################################################################
_______________________________________________________________________________

Gérer les alertes et messages lors des envoies de formulaires
Étapes d'exécution : Class.php > Message.php > Form.php > Message.js > alert.js

1 : Class.php
_____________

return new Message(#1, #2, #3);
#1 = Type (error, warning, success)
#2 = Message
#3 = Méthode (alerte JS persistente, non-persistente, sans JS dans une div...)
_______________________________________

2 : Message.php > Form.php > Message.js

On retourne le message en fonction de la méthode utilisé #3
____________

3 : alert.js

Design et fonctionnement d'une alerte
_______________________________________________________________________________



